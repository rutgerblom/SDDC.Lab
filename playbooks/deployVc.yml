##
##    Project: SDDC.Lab
##    Authors: Luis Chanu & Rutger Blom
##   Filename: playbooks/deployVc.yml
##
---
- hosts: localhost
  name: deployVc.yml
  vars:
    ISOMountPoint: "{{ Target.ISOMount }}/{{ Deploy.Software.vCenter.Vendor }}_{{ Deploy.Software.vCenter.Product }}_{{ Deploy.Software.vCenter.Version }}"
  tasks:
    - name: deployVc_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: Display error message if Pod-XXX-Config file is not valid or provided
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/createPodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      ansible.builtin.meta: end_play
      when: Valid_Pod_Config_File is not defined


    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ============================ Display Variables For Pod {{Pod.Number}} ===========================

                                     Ansible Playbook: {{ ansible_play_name }}

                                    Target.Deployment: {{ Target.Deployment }}

                                          Target.FQDN: {{ Target.FQDN }}
                                          Target.User: {{ Target.User }}
                                      Target.Password: {{ Target.Password }}
                                       Target.Cluster: {{ Target.Cluster }}
                                    Target.DataCenter: {{ Target.DataCenter }}
                                     Target.Datastore: {{ Target.Datastore }}
                                      Target.VMFolder: {{ Target.VMFolder }}

                                        ISOMountPoint: {{ ISOMountPoint }}

                                               Vendor: {{ Deploy.Software.vCenter.Vendor }}
                                              Product: {{ Deploy.Software.vCenter.Product }}
                                              Version: {{ Deploy.Software.vCenter.Version }}
                                       Location.Local: {{ Deploy.Software.vCenter.Directory }}
                                                 File: {{ Deploy.Software.vCenter.File }}

                                        Host Template: {{ Deploy.Software.vCenter.Template.ESXi }}
                                     vCenter Template: {{ Deploy.Software.vCenter.Template.vCenter }}
                          Host Template (Replication): {{ Deploy.Software.vCenter.Template.Repl_ESXi }}
                       vCenter Template (Replication): {{ Deploy.Software.vCenter.Template.Repl_vCenter }}
           Installation Configuration (From Template): {{ Target.TempFolder }}/{{ Deploy.Software.vCenter.Config }}

                          vCenter Replication Partner: {{ Nested_vCenter.SSO.ReplicationPartner }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true

    - name: Create temp directory
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}"
        state: directory

    - name: Check if vCenter is already installed
      ansible.builtin.uri:
        url: https://{{ Nested_vCenter.Address.IPv4.Address }}
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        timeout: 5
      register: vcenter_check
      ignore_errors: True
      failed_when: false
      no_log: True

    - name: Create vCenter with embedded PSC installation template (Target=Host) - No Replication Partner
      ansible.builtin.template: 
        src:  "{{ Target.TemplateFolder }}/{{ Deploy.Software.vCenter.Template.ESXi }}"
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.vCenter.Config }}"
        mode: "666"
      when:
        - vcenter_check.status != 200
        - Target.Deployment == "Host"
        - Nested_vCenter.SSO.ReplicationPartner == ""

    - name: Create vCenter with embedded PSC installation template (Target=vCenter) - No Replication Partner
      ansible.builtin.template: 
        src:  "{{ Target.TemplateFolder }}/{{ Deploy.Software.vCenter.Template.vCenter }}"
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.vCenter.Config }}"
        mode: "666"
      when:
        - vcenter_check.status != 200
        - Target.Deployment == "vCenter"
        - Nested_vCenter.SSO.ReplicationPartner == ""

    - name: Create vCenter with embedded PSC installation template (Target=Host) - With Replication Partner
      ansible.builtin.template: 
        src:  "{{ Target.TemplateFolder }}/{{ Deploy.Software.vCenter.Template.Repl_ESXi }}"
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.vCenter.Config }}"
        mode: "666"
      when:
        - vcenter_check.status != 200
        - Target.Deployment == "Host"
        - Nested_vCenter.SSO.ReplicationPartner != ""

    - name: Create vCenter with embedded PSC installation template (Target=vCenter) - With Replication Partner
      ansible.builtin.template: 
        src:  "{{ Target.TemplateFolder }}/{{ Deploy.Software.vCenter.Template.Repl_vCenter }}"
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.vCenter.Config }}"
        mode: "666"
      when:
        - vcenter_check.status != 200
        - Target.Deployment == "vCenter"
        - Nested_vCenter.SSO.ReplicationPartner != ""

    - name: Mount vCenter ISO as read-only and do not automatically mount with 'mount -a'
      ansible.posix.mount:
        path:   "{{ ISOMountPoint }}"
        src:    "{{ Deploy.Software.vCenter.Directory }}/{{ Deploy.Software.vCenter.File }}"
        fstype: iso9660
        opts:   ro,noauto
        state:  mounted
      when: vcenter_check.status != 200

    - name: Notify user of vCenter install time
      ansible.builtin.debug:
        msg: "Deploying vCenter will take about 20 minutes, so go grab a smoothie!!!"
      when: vcenter_check.status != 200
      
    - name: Perform vCenter CLI-based installation
      ansible.builtin.command: "./vcsa-deploy install --accept-eula --no-ssl-certificate-verification --acknowledge-ceip {{ Target.TempFolder }}/{{ Deploy.Software.vCenter.Config }}"
      args:
        chdir: "{{ ISOMountPoint }}/vcsa-cli-installer/lin64/"
      register: vcdeploy
      when: vcenter_check.status != 200

    - name: Unmount vCenter ISO
      ansible.posix.mount:
        path:   "{{ ISOMountPoint }}"
        state:  absent
      when:
        - vcenter_check.status != 200
        - Deploy.Software.Options.UnmountISO

    - name: Delete the temporary vCenter with embedded PSC installation template
      ansible.builtin.file: "path={{ Target.TempFolder }}/{{ Deploy.Software.vCenter.Config }} state=absent"
      when: 
        - vcenter_check.status != 200
        - DEBUG.KeepConfigFiles != true

    - name: Write annotation on the vCenter VM
      community.vmware.vmware_guest:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        cluster: "{{ Target.Cluster }}"
        datacenter: "{{ Target.DataCenter }}"
        folder: "{{ Target.VMFolder }}"
        name: "{{ Nested_vCenter.VMName }}"
        annotation: | 
                    {{ Common.Annotation }}
                    {{ Deploy.Software.vCenter.Vendor }} {{ Deploy.Software.vCenter.Product }} {{ Deploy.Software.vCenter.Version }}
                    Username: {{ Nested_vCenter.User }}
                    Password: {{ Nested_vCenter.Password }}

    - name: Create Datacenter
      community.vmware.vmware_datacenter:
        hostname: "{{ Nested_vCenter.FQDN | lower }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        datacenter_name: "{{ Nested_vCenter.DataCenter }}"
        state: present
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
      when: vcenter_check.status != 200

    - name: Create Clusters
      community.vmware.vmware_cluster:
        hostname: "{{ Nested_vCenter.FQDN | lower }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        datacenter_name: "{{ Nested_vCenter.DataCenter }}"
        cluster_name: "{{ item.key }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
      loop: "{{ Nested_Cluster | dict2items }}"
      when: 
        - vcenter_check.status != 200
        - item.value.DeployHosts == true

    - name: Enable DRS on each Cluster, if applicable
      community.vmware.vmware_cluster_drs:
        hostname: "{{ Nested_vCenter.FQDN | lower }}"
        username: "{{ Nested_vCenter.User }}"
        password: "{{ Nested_vCenter.Password }}"
        datacenter_name: "{{ Nested_vCenter.DataCenter }}"
        cluster_name: "{{ item.key }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        enable: "{{ item.value.DRS }}"
      loop: "{{ Nested_Cluster | dict2items }}"
      when: 
        - vcenter_check.status != 200
        - item.value.DeployHosts == true
