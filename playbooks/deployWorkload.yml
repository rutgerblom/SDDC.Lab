##
##    Project: SDDC.Lab
##    Authors: Luis Chanu & Rutger Blom
##   Filename: playbooks/deployWorkload.yml
##
---
- hosts: localhost
  name: deployWorkload.yml
  tasks:
    - name: deployWorkload.yml
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: Display error message if Pod-XXX-Config file is not valid or provided
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/createPodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      ansible.builtin.meta: end_play
      when: Valid_Pod_Config_File is not defined


    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d'|format(Pod.Number|int) }} ==================================


                                     Ansible Playbook: {{ ansible_play_name }}

                                  Nested_vCenter.FQDN: {{ Nested_vCenter.FQDN  }}
                                  Nested_vCenter.User: {{ Nested_vCenter.User }}
                              Nested_vCenter.Password: {{ Nested_vCenter.Password }}

                                     Workload Version: {{ Deploy.Software.Workload.Version }}

                                                OVF Variables
                                                =============

                                  Workload Media Path: {{ Deploy.Software.Workload.Directory }}
                                  Workload Media File: {{ Deploy.Software.Workload.File }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true

    - name: Check if Photon OS OVA file exists locally in the software repository
      ansible.builtin.stat:
        path: "{{ Deploy.Software.Workload.Directory }}/{{ Deploy.Software.Workload.File }}"
      register: InstallerFileCheck
      when:
        - Deploy.Product.Workload == true

    - name: Update Photon OS OVA file in the local software repository (overwrite if exists)
      ansible.builtin.get_url:
        url:  "{{ Deploy.Software.Workload.URL }}/{{ Deploy.Software.Workload.File }}"
        dest: "{{ Deploy.Software.Workload.Directory }}/{{ Deploy.Software.Workload.File }}"
        force: yes
      when: 
        - (InstallerFileCheck.stat.exists != true) or (Deploy.Software.Options.UseLocalInstaller != true)
        - Deploy.Software.Options.KeepNewInstallers == true
        - Deploy.Product.Workload == true 

    - name: Deploy Workload from OVA
      community.vmware.vmware_deploy_ovf:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{  Nested_vCenter.User }}"
        password: "{{  Nested_vCenter.Password }}"
        validate_certs: false
        datastore: "{{ item.value.Deployment.Datastore }}"
        allow_duplicates: false
        datacenter: "{{ item.value.Deployment.DataCenter }}"
        cluster: "{{ item.value.Deployment.Cluster }}"
        name: "{{ item.value.VMName }}"
        ovf: "{{ Deploy.Software.Workload.Directory }}/{{ Deploy.Software.Workload.File }}"
        networks:
          "None": "{{ item.value.Interface.eth0.PortGroup }}"
        disk_provisioning: "{{ Common.DiskProvisioning }}"
        power_on: true
      loop: "{{ Nested_Workload | dict2items }}"
      when:
        - Deploy.Product.Workload == true

    - name: Write annotation on the Workload VMs
      community.vmware.vmware_guest:
        hostname: "{{ Nested_vCenter.FQDN }}"
        username: "{{  Nested_vCenter.User }}"
        password: "{{  Nested_vCenter.Password }}"
        validate_certs: false
        datacenter: "{{ item.value.Deployment.DataCenter }}"
        cluster: "{{ item.value.Deployment.Cluster }}"
        name: "{{ item.value.VMName }}"
        annotation: | 
                    {{ Common.Annotation }}
                    {{ Deploy.Software.Workload.Vendor }} {{ Deploy.Software.Workload.Product }} {{ Deploy.Software.Workload.Version }}
                    Username: {{ item.value.Credential.root.Name }}
                    Password: {{ item.value.Credential.root.Password }}
      loop: "{{ Nested_Workload | dict2items }}"
      when:
        - Deploy.Product.Workload == true