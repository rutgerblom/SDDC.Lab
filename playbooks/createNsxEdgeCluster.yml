##
##    Project: SDDC.Lab
##    Authors: Luis Chanu & Rutger Blom
##   Filename: playbooks/createNsxEdgeCluster.yml
##
---
- hosts: localhost
  name: createNsxEdgeCluster.yml
  vars:
      LOCAL_EdgeClusterTemplate: "{{ Target.TemplateFolder }}/vars_NSXT_EdgeClusters.j2"
  tasks:
    - name: createNsxEdgeCluster_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: Display error message if Pod-XXX-Config file is not valid or provided
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/createPodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      meta: end_play
      when: Valid_Pod_Config_File is not defined


    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d'|format(Pod.Number|int) }} ==================================


                                             Ansible Playbook: {{ ansible_play_name }}

                                            Target.Deployment: {{ Target.Deployment }}

                  Nested_NSXT.Component.LocalManager_VIP.FQDN: {{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}

                               Number of Edge Transport Nodes: {{ Nested_NSXT.System.Fabric.Nodes.EdgeTransportNodes | length }}
           Nested_NSXT.System.Fabric.Nodes.EdgeTransportNodes: {{ Nested_NSXT.System.Fabric.Nodes.EdgeTransportNodes }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        - Deploy.Product.NSXT.LocalManager.Deploy == true

    - name: Read the structure from template into a variable
      ansible.builtin.set_fact:
        var_EdgeClusters: "{{ lookup('template', LOCAL_EdgeClusterTemplate) | from_yaml }}"
      when:
        - Deploy.Product.NSXT.LocalManager.Deploy == true
        - Deploy.Product.NSXT.Edge.Deploy == true

    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display var_EdgeClusters Variable ===================================

          var_EdgeTransportNodes:
            {{ var_EdgeClusters | to_nice_yaml(indent=2, width=99999) | indent(2) }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        - Deploy.Product.NSXT.LocalManager.Deploy == true
        - var_EdgeClusters != ""


##
## In NSX-T v3.2.0, during the task where User Accounts password aging is set to 0 (==Do Not Expire), the EdgeVM nodes 
## transition into "IN_PROGRESS" states for each User Account that is reconfigured.  If any of the Edge VM nodes are 
## NOT in "SUCCESS" state, the Edge Cluster creation play will fail.  For that reason, we need to verify that all of
## the EdgeVM Nodes are in "SUCCESS" state before we proceed with the Edge Cluster creation.
##
    - name:  Wait until all Edge Nodes deployed report as being in a realized 'SUCCESS' state
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}/api/v1/transport-nodes/state?status=SUCCESS
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        timeout: 20
        force_basic_auth: yes
        method: GET
        body_format: json
        return_content: yes
        status_code: 200
      register: result
      until: result.status == 200 and ((result | community.general.json_query(query) | length) == (Nested_NSXT.System.Fabric.Nodes.EdgeTransportNodes | length))
      retries: 10
      delay: 30
      vars:
        # JSON Query returns all EdgeVMs from the list of ALL the Transport Nodes (Host & Edges) we received from the REST API call
        query: json.results[?node_deployment_state.state=='NODE_READY']
      when: 
        - Deploy.Product.NSXT.LocalManager.Deploy == true
        - Deploy.Product.NSXT.Edge.Deploy == true
        - var_EdgeClusters != ""


##
## At this point, all EdgeVMs are in a "SUCCESS" state, so we can proceed with creating the Edge Cluster.
##
    - name: Create NSX-T Edge Cluster
      vmware.ansible_for_nsxt.nsxt_edge_clusters:
        hostname: "{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}"
        username: "{{ Nested_NSXT.Credential.admin.Name }}"
        password: "{{ Nested_NSXT.Credential.admin.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        display_name: "{{ item.display_name }}"
        description: "{{ item.description }}"
        tags: "{{ item.tags }}"
        cluster_profile_bindings: "{{ item.cluster_profile_bindings }}"
        members: "{{ item.members }}"
        state: present
      register: edge_cluster
      loop: "{{ var_EdgeClusters }}"
      when: 
        - Deploy.Product.NSXT.LocalManager.Deploy == true
        - Deploy.Product.NSXT.Edge.Deploy == true
        - var_EdgeClusters != ""

    - name:  Wait until the NSX-T API reports that the Edge Cluster is in realized state
      ansible.builtin.uri:
        url: https://{{ Nested_NSXT.Component.LocalManager_VIP.FQDN }}/policy/api/v1/infra/sites/default/enforcement-points/default/edge-clusters/{{ edge_cluster | json_query('results[].id') | first }}
        url_username: "{{ Nested_NSXT.Credential.admin.Name }}"
        url_password: "{{ Nested_NSXT.Credential.admin.Password }}"
        validate_certs: "{{ Common.PKI.ValidateCerts }}"
        timeout: 15
        force_basic_auth: yes
        method: GET
        body_format: json
        return_content: yes
        status_code: 200
      register: result
      until: result.status == 200
      retries: 30
      delay: 60
      when: 
        - Deploy.Product.NSXT.LocalManager.Deploy == true
        - Deploy.Product.NSXT.Edge.Deploy == true
        - var_EdgeClusters != ""
